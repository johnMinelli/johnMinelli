// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sJW2SjvbA4LuFhHrBsyfEH
// Component: VuN4Vj5UkyvQa

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SocialLink from "../../SocialLink"; // plasmic-import: hx5Zt00vBr/component
import Book from "../../Book"; // plasmic-import: qroDzoOns2/component

import { useScreenVariants as useScreenVariants_943UUhCMfqsg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 943uUhC-MFQSG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_john_minelli_page.module.css"; // plasmic-import: sJW2SjvbA4LuFhHrBsyfEH/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: VuN4Vj5UkyvQa/css

import immaginepng9FfEi69E from "./images/immaginepng.png"; // plasmic-import: 9FfEI69E_/picture

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  description?: p.Flex<"div">;
};

export interface DefaultHomeProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_943UUhCMfqsg()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__ozs9H)}>
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"100%" as const}
                displayMaxHeight={"256px" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? ("none" as const)
                    : ("256px" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("55%" as const)
                    : ("50%" as const)
                }
                loading={"lazy" as const}
                src={{
                  src: immaginepng9FfEi69E,
                  fullWidth: 640,
                  fullHeight: 640,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nmq9V
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "Hi! I'm\nGiovanni Minelli"
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? "Hi!  I'm\nGiovanni Minelli"
                    : "Hi!  I'm\nGiovanni Minelli"}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__tJgb0)}>
                  <SocialLink
                    className={classNames(
                      "__wab_instance",
                      sty.socialLink__bbGhn
                    )}
                    social={"git" as const}
                  />

                  <SocialLink
                    className={classNames(
                      "__wab_instance",
                      sty.socialLink__aaXth
                    )}
                    social={"twitter" as const}
                  />

                  <SocialLink
                    className={classNames(
                      "__wab_instance",
                      sty.socialLink___1HqJ3
                    )}
                    social={"linkedin" as const}
                  />
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__aHFP)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jkb6T
                    )}
                  >
                    {"Hi!  I'm\nGiovanni Minelli"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hPhab)}
                  >
                    <SocialLink
                      className={classNames(
                        "__wab_instance",
                        sty.socialLink__jX30P
                      )}
                      social={"git" as const}
                    />

                    <SocialLink
                      className={classNames(
                        "__wab_instance",
                        sty.socialLink__dwb2Q
                      )}
                      social={"twitter" as const}
                    />

                    <SocialLink
                      className={classNames(
                        "__wab_instance",
                        sty.socialLink__kKaFe
                      )}
                      social={"linkedin" as const}
                    />
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
          <div
            data-plasmic-name={"description"}
            data-plasmic-override={overrides.description}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.description
            )}
          >
            {
              "Iâ€™m a developer, computer scientist, and machine learning engineer. As best I can, I want to use my skills to build a better world.\n\nThis is a page for quick access to my projects, you can have a look around if youâ€™d like ðŸ˜„"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fl3Rq)}>
            <Book
              className={classNames("__wab_instance", sty.book__v76TD)}
              project={"coinshoarder" as const}
            />

            <Book
              className={classNames("__wab_instance", sty.book__rxsbp)}
              project={"yaeOs" as const}
            />

            <Book
              className={classNames("__wab_instance", sty.book__ga7Tw)}
              project={"puzzleSolver" as const}
            />

            <Book
              className={classNames("__wab_instance", sty.book___4Ii8V)}
              project={"movingObject" as const}
            />

            <Book
              className={classNames("__wab_instance", sty.book__fu3V)}
              project={"flatland" as const}
            />

            <Book
              className={classNames("__wab_instance", sty.book__c39Iw)}
              project={"coRec" as const}
            />

            <Book
              className={classNames("__wab_instance", sty.book__xo8Ug)}
              project={"envKnob" as const}
            />

            <Book
              className={classNames("__wab_instance", sty.book__p93Af)}
              project={"twoWaySinth" as const}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "description"],
  img: ["img"],
  description: ["description"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  description: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    description: makeNodeComponent("description"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "JohnMinelli's page",
      description: "Collection of JohnMinelli's projects and resources",
      ogImageSrc:
        "https://site-assets.plasmic.app/2d3bb51152ff0853ba42b838259f67b0.svg",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
