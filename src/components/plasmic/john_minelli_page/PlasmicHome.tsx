// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sJW2SjvbA4LuFhHrBsyfEH
// Component: VuN4Vj5UkyvQa

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SocialLink from "../../SocialLink"; // plasmic-import: hx5Zt00vBr/component
import Back from "../../Back"; // plasmic-import: Ckf923Zffah2/component
import Book from "../../Book"; // plasmic-import: qroDzoOns2/component

import { useScreenVariants as useScreenVariants_943UUhCMfqsg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 943uUhC-MFQSG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_john_minelli_page.module.css"; // plasmic-import: sJW2SjvbA4LuFhHrBsyfEH/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: VuN4Vj5UkyvQa/css

import immaginepng9FfEi69E from "./images/immaginepng.png"; // plasmic-import: 9FfEI69E_/picture
import image23DNxZgayuy from "./images/image2.svg"; // plasmic-import: 3DNxZgayuy/picture
import faviconsvgTQxq5NPiOd from "./images/faviconsvg.svg"; // plasmic-import: tQxq5NPiOd/picture

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  description?: Flex__<"div">;
  section12?: Flex__<"div">;
  back?: Flex__<typeof Back>;
  section?: Flex__<"section">;
  section3?: Flex__<"div">;
  projector2?: Flex__<typeof PlasmicImg__>;
  timeline?: Flex__<"div">;
  timeline1?: Flex__<"div">;
  timeline12?: Flex__<"div">;
  timeline2?: Flex__<"div">;
  timeline3?: Flex__<"div">;
  timeline4?: Flex__<"div">;
};

export interface DefaultHomeProps {
  className?: string;
}

const $$ = {};

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "designer",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_943UUhCMfqsg()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "tablet")
              ? true
              : hasVariant(globalVariants, "screen", "laptop")
              ? true
              : (() => {
                  try {
                    return $state.designer;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fYj1D
              )}
            >
              {'"Definitely not a designer!"'}
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__ozs9H)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"100%"}
              displayMaxHeight={"256px"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "tablet")
                  ? "none"
                  : "256px"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "55%"
                  : "50%"
              }
              loading={"lazy"}
              onClick={async event => {
                const $steps = {};

                $steps["updateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["designer"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateVariable"] != null &&
                  typeof $steps["updateVariable"] === "object" &&
                  typeof $steps["updateVariable"].then === "function"
                ) {
                  $steps["updateVariable"] = await $steps["updateVariable"];
                }
              }}
              src={{
                src: immaginepng9FfEi69E,
                fullWidth: 640,
                fullHeight: 640,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nmq9V
              )}
            >
              {hasVariant(globalVariants, "screen", "tablet")
                ? "Hi! I'm\nGiovanni Minelli"
                : hasVariant(globalVariants, "screen", "laptop")
                ? "Hi!  I'm\nGiovanni Minelli"
                : "Hi!  I'm\nGiovanni Minelli"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tJgb0)}>
              <SocialLink
                className={classNames("__wab_instance", sty.socialLink__bbGhn)}
                social={"git"}
              />

              <SocialLink
                className={classNames("__wab_instance", sty.socialLink__aaXth)}
                social={"twitter"}
              />

              <SocialLink
                className={classNames("__wab_instance", sty.socialLink___1HqJ3)}
                social={"linkedin"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__aHFP)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jkb6T
                )}
              >
                {"Hi!  I'm\nGiovanni Minelli"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hPhab)}>
                <SocialLink
                  className={classNames(
                    "__wab_instance",
                    sty.socialLink__jX30P
                  )}
                  social={"git"}
                />

                <SocialLink
                  className={classNames(
                    "__wab_instance",
                    sty.socialLink__dwb2Q
                  )}
                  social={"twitter"}
                />

                <SocialLink
                  className={classNames(
                    "__wab_instance",
                    sty.socialLink__kKaFe
                  )}
                  social={"linkedin"}
                />
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"description"}
            data-plasmic-override={overrides.description}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.description
            )}
          >
            {
              "I\u2019m a developer, computer scientist, and machine learning engineer. As best I can, I want to use my skills to build a better world.\n\nThis is a page for quick access to my projects, you can have a look around if you\u2019d like \ud83d\ude04"
            }
          </div>
          <div
            data-plasmic-name={"section12"}
            data-plasmic-override={overrides.section12}
            className={classNames(projectcss.all, sty.section12)}
          >
            <Back
              data-plasmic-name={"back"}
              data-plasmic-override={overrides.back}
              className={classNames("__wab_instance", sty.back)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__fl3Rq)}>
              <Book
                className={classNames("__wab_instance", sty.book__v76TD)}
                project={"coinshoarder"}
              />

              <Book
                className={classNames("__wab_instance", sty.book__rxsbp)}
                project={"yaeOs"}
              />

              <Book
                className={classNames("__wab_instance", sty.book__ga7Tw)}
                project={"puzzleSolver"}
              />

              <Book
                className={classNames("__wab_instance", sty.book___4Ii8V)}
                project={"movingObject"}
              />

              <Book
                className={classNames("__wab_instance", sty.book__fu3V)}
                project={"flatland"}
              />

              <Book
                className={classNames("__wab_instance", sty.book__c39Iw)}
                project={"coRec"}
              />

              <Book
                className={classNames("__wab_instance", sty.book__xo8Ug)}
                project={"envKnob"}
              />

              <Book
                className={classNames("__wab_instance", sty.book__p93Af)}
                project={"twoWaySinth"}
              />

              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"section3"}
            data-plasmic-override={overrides.section3}
            className={classNames(projectcss.all, sty.section3)}
          >
            <PlasmicImg__
              data-plasmic-name={"projector2"}
              data-plasmic-override={overrides.projector2}
              alt={""}
              className={classNames(sty.projector2)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "583px"
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? "591px"
                  : "auto"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: image23DNxZgayuy,
                fullWidth: 173,
                fullHeight: 150,
                aspectRatio: 1.15015
              }}
            />

            <div
              data-plasmic-name={"timeline"}
              data-plasmic-override={overrides.timeline}
              className={classNames(projectcss.all, sty.timeline)}
            >
              <div
                data-plasmic-name={"timeline1"}
                data-plasmic-override={overrides.timeline1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.timeline1
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"    "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Oct 2023"}
                  </span>
                  <React.Fragment>
                    {" - Research Fellow in CVLab @University of Bologna "}
                  </React.Fragment>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"timeline12"}
                data-plasmic-override={overrides.timeline12}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.timeline12
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"     "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"May 2023"}
                  </span>
                  <React.Fragment>
                    {
                      " - Intern researcher in LEAR (Learning Agents and Robots) Team @CYENS (Nicosia, CY) "
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"timeline2"}
                data-plasmic-override={overrides.timeline2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.timeline2
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Mar 2023"}
                  </span>
                  <React.Fragment>
                    {
                      " - Ended my MSc in Artificial Intelligence @University of Bologna"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"timeline3"}
                data-plasmic-override={overrides.timeline3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.timeline3
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Oct 2022"}
                  </span>
                  <React.Fragment>
                    {
                      " - Thesis preparation abroad in Machine Intelligence Lab @UCL (London, UK) "
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"timeline4"}
                data-plasmic-override={overrides.timeline4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.timeline4
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Oct 2020"}
                  </span>
                  <React.Fragment>
                    {
                      " - Started Master degree in Artificial Intelligence @University of Bologna"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "description",
    "section12",
    "back",
    "section",
    "section3",
    "projector2",
    "timeline",
    "timeline1",
    "timeline12",
    "timeline2",
    "timeline3",
    "timeline4"
  ],
  img: ["img"],
  description: ["description"],
  section12: ["section12", "back", "section"],
  back: ["back"],
  section: ["section"],
  section3: [
    "section3",
    "projector2",
    "timeline",
    "timeline1",
    "timeline12",
    "timeline2",
    "timeline3",
    "timeline4"
  ],
  projector2: ["projector2"],
  timeline: [
    "timeline",
    "timeline1",
    "timeline12",
    "timeline2",
    "timeline3",
    "timeline4"
  ],
  timeline1: ["timeline1"],
  timeline12: ["timeline12"],
  timeline2: ["timeline2"],
  timeline3: ["timeline3"],
  timeline4: ["timeline4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  description: "div";
  section12: "div";
  back: typeof Back;
  section: "section";
  section3: "div";
  projector2: typeof PlasmicImg__;
  timeline: "div";
  timeline1: "div";
  timeline12: "div";
  timeline2: "div";
  timeline3: "div";
  timeline4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    description: makeNodeComponent("description"),
    section12: makeNodeComponent("section12"),
    back: makeNodeComponent("back"),
    section: makeNodeComponent("section"),
    section3: makeNodeComponent("section3"),
    projector2: makeNodeComponent("projector2"),
    timeline: makeNodeComponent("timeline"),
    timeline1: makeNodeComponent("timeline1"),
    timeline12: makeNodeComponent("timeline12"),
    timeline2: makeNodeComponent("timeline2"),
    timeline3: makeNodeComponent("timeline3"),
    timeline4: makeNodeComponent("timeline4"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "JohnMinelli's page",
      description: "Collection of JohnMinelli's projects and resources",
      ogImageSrc:
        "https://site-assets.plasmic.app/2d3bb51152ff0853ba42b838259f67b0.svg",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
