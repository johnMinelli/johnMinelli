// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sJW2SjvbA4LuFhHrBsyfEH
// Component: VuN4Vj5UkyvQa

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SocialLink from "../../SocialLink"; // plasmic-import: hx5Zt00vBr/component
import Book from "../../Book"; // plasmic-import: qroDzoOns2/component
import Printer from "../../Printer"; // plasmic-import: ktUZWyedPGv/component

import { useScreenVariants as useScreenVariants_943UUhCMfqsg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 943uUhC-MFQSG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_john_minelli_page.module.css"; // plasmic-import: sJW2SjvbA4LuFhHrBsyfEH/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: VuN4Vj5UkyvQa/css

import immaginepng9FfEi69E from "./images/immaginepng.png"; // plasmic-import: 9FfEI69E_/picture
import image23DNxZgayuy from "./images/image2.svg"; // plasmic-import: 3DNxZgayuy/picture
import githubSvgrepoCom1SvgTQxq5NPiOd from "./images/githubSvgrepoCom1Svg.svg"; // plasmic-import: tQxq5NPiOd/picture

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  description?: p.Flex<"div">;
  section12?: p.Flex<"div">;
  printer?: p.Flex<typeof Printer>;
  section3?: p.Flex<"div">;
  projector2?: p.Flex<typeof p.PlasmicImg>;
  timeline?: p.Flex<"div">;
  timeline1?: p.Flex<"div">;
  timeline2?: p.Flex<"div">;
  timeline3?: p.Flex<"div">;
  timeline4?: p.Flex<"div">;
};

export interface DefaultHomeProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "printer.variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "designer",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_943UUhCMfqsg()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "tablet")
              ? true
              : hasVariant(globalVariants, "screen", "laptop")
              ? true
              : (() => {
                  try {
                    return $state.designer;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fYj1D
              )}
            >
              {'"Definitely not a designer!"'}
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__ozs9H)}>
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"100%" as const}
                displayMaxHeight={"256px" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? ("none" as const)
                    : ("256px" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("55%" as const)
                    : ("50%" as const)
                }
                loading={"lazy" as const}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "DEsdtQGT9",
                              componentUuid: "VuN4Vj5UkyvQa",
                              argName: "variable"
                            },
                            () => ({
                              objRoot: $state,
                              variablePath: ["designer"]
                            })
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "DEsdtQGT9",
                              componentUuid: "VuN4Vj5UkyvQa",
                              argName: "operation"
                            },
                            () => 4
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "DEsdtQGT9",
                            componentUuid: "VuN4Vj5UkyvQa"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = p.get(objRoot, variablePath);
                              p.set(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["updateVariable"] === "object" &&
                    typeof $steps["updateVariable"].then === "function"
                  ) {
                    $steps["updateVariable"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "DEsdtQGT9",
                        componentUuid: "VuN4Vj5UkyvQa"
                      },
                      $steps["updateVariable"]
                    );
                  }
                }}
                src={{
                  src: immaginepng9FfEi69E,
                  fullWidth: 640,
                  fullHeight: 640,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nmq9V
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "Hi! I'm\nGiovanni Minelli"
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? "Hi!  I'm\nGiovanni Minelli"
                    : "Hi!  I'm\nGiovanni Minelli"}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__tJgb0)}>
                  <SocialLink
                    className={classNames(
                      "__wab_instance",
                      sty.socialLink__bbGhn
                    )}
                    social={"git" as const}
                  />

                  <SocialLink
                    className={classNames(
                      "__wab_instance",
                      sty.socialLink__aaXth
                    )}
                    social={"twitter" as const}
                  />

                  <SocialLink
                    className={classNames(
                      "__wab_instance",
                      sty.socialLink___1HqJ3
                    )}
                    social={"linkedin" as const}
                  />
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__aHFP)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jkb6T
                    )}
                  >
                    {"Hi!  I'm\nGiovanni Minelli"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hPhab)}
                  >
                    <SocialLink
                      className={classNames(
                        "__wab_instance",
                        sty.socialLink__jX30P
                      )}
                      social={"git" as const}
                    />

                    <SocialLink
                      className={classNames(
                        "__wab_instance",
                        sty.socialLink__dwb2Q
                      )}
                      social={"twitter" as const}
                    />

                    <SocialLink
                      className={classNames(
                        "__wab_instance",
                        sty.socialLink__kKaFe
                      )}
                      social={"linkedin" as const}
                    />
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
          <div
            data-plasmic-name={"description"}
            data-plasmic-override={overrides.description}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.description
            )}
          >
            {
              "I\u2019m a developer, computer scientist, and machine learning engineer. As best I can, I want to use my skills to build a better world.\n\nThis is a page for quick access to my projects, you can have a look around if you\u2019d like \ud83d\ude04"
            }
          </div>
          {true ? (
            <div
              data-plasmic-name={"section12"}
              data-plasmic-override={overrides.section12}
              className={classNames(projectcss.all, sty.section12)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__fl3Rq)}>
                <Book
                  className={classNames("__wab_instance", sty.book__v76TD)}
                  project={"coinshoarder" as const}
                />

                <Book
                  className={classNames("__wab_instance", sty.book__rxsbp)}
                  project={"yaeOs" as const}
                />

                <Book
                  className={classNames("__wab_instance", sty.book__ga7Tw)}
                  project={"puzzleSolver" as const}
                />

                <Book
                  className={classNames("__wab_instance", sty.book___4Ii8V)}
                  project={"movingObject" as const}
                />

                <Book
                  className={classNames("__wab_instance", sty.book__fu3V)}
                  project={"flatland" as const}
                />

                <Book
                  className={classNames("__wab_instance", sty.book__c39Iw)}
                  project={"coRec" as const}
                />

                <Book
                  className={classNames("__wab_instance", sty.book__xo8Ug)}
                  project={"envKnob" as const}
                />

                <Book
                  className={classNames("__wab_instance", sty.book__p93Af)}
                  project={"twoWaySinth" as const}
                />
              </div>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__prPw)}>
                  <Printer
                    data-plasmic-name={"printer"}
                    data-plasmic-override={overrides.printer}
                    className={classNames("__wab_instance", sty.printer)}
                    onVariableChange={p.generateStateOnChangeProp($state, [
                      "printer",
                      "variable"
                    ])}
                    variable={p.generateStateValueProp($state, [
                      "printer",
                      "variable"
                    ])}
                  />
                </div>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"section3"}
              data-plasmic-override={overrides.section3}
              className={classNames(projectcss.all, sty.section3)}
            >
              <p.PlasmicImg
                data-plasmic-name={"projector2"}
                data-plasmic-override={overrides.projector2}
                alt={""}
                className={classNames(sty.projector2)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("583px" as const)
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? ("591px" as const)
                    : ("auto" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: image23DNxZgayuy,
                  fullWidth: 173,
                  fullHeight: 150,
                  aspectRatio: 1.15015
                }}
              />

              {true ? (
                <div
                  data-plasmic-name={"timeline"}
                  data-plasmic-override={overrides.timeline}
                  className={classNames(projectcss.all, sty.timeline)}
                >
                  <div
                    data-plasmic-name={"timeline1"}
                    data-plasmic-override={overrides.timeline1}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.timeline1
                    )}
                  >
                    {
                      "     May 2023 - Intern researcher in Learning Agents and Robots (LEAR) Team at CYENS (Nicosia, CY) "
                    }
                  </div>
                  <div
                    data-plasmic-name={"timeline2"}
                    data-plasmic-override={overrides.timeline2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.timeline2
                    )}
                  >
                    {
                      "Mar 2023 - Ended my MSc in Artificial Intelligence at University of Bologna"
                    }
                  </div>
                  <div
                    data-plasmic-name={"timeline3"}
                    data-plasmic-override={overrides.timeline3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.timeline3
                    )}
                  >
                    {
                      "Oct 2022 - Thesis preparation abroad in Machine Intelligence Lab at UCL (London, UK) "
                    }
                  </div>
                  <div
                    data-plasmic-name={"timeline4"}
                    data-plasmic-override={overrides.timeline4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.timeline4
                    )}
                  >
                    {
                      "Oct 2020 - Started a Master degree in Artificial Intelligence at University of Bologna"
                    }
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "description",
    "section12",
    "printer",
    "section3",
    "projector2",
    "timeline",
    "timeline1",
    "timeline2",
    "timeline3",
    "timeline4"
  ],
  img: ["img"],
  description: ["description"],
  section12: ["section12", "printer"],
  printer: ["printer"],
  section3: [
    "section3",
    "projector2",
    "timeline",
    "timeline1",
    "timeline2",
    "timeline3",
    "timeline4"
  ],
  projector2: ["projector2"],
  timeline: ["timeline", "timeline1", "timeline2", "timeline3", "timeline4"],
  timeline1: ["timeline1"],
  timeline2: ["timeline2"],
  timeline3: ["timeline3"],
  timeline4: ["timeline4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  description: "div";
  section12: "div";
  printer: typeof Printer;
  section3: "div";
  projector2: typeof p.PlasmicImg;
  timeline: "div";
  timeline1: "div";
  timeline2: "div";
  timeline3: "div";
  timeline4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    description: makeNodeComponent("description"),
    section12: makeNodeComponent("section12"),
    printer: makeNodeComponent("printer"),
    section3: makeNodeComponent("section3"),
    projector2: makeNodeComponent("projector2"),
    timeline: makeNodeComponent("timeline"),
    timeline1: makeNodeComponent("timeline1"),
    timeline2: makeNodeComponent("timeline2"),
    timeline3: makeNodeComponent("timeline3"),
    timeline4: makeNodeComponent("timeline4"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "JohnMinelli's page",
      description: "Collection of JohnMinelli's projects and resources",
      ogImageSrc:
        "https://site-assets.plasmic.app/2d3bb51152ff0853ba42b838259f67b0.svg",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
