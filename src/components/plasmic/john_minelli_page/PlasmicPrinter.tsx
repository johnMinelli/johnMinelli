// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sJW2SjvbA4LuFhHrBsyfEH
// Component: ktUZWyedPGv

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paper1Button from "../../Paper1Button"; // plasmic-import: DiDoqGTUiD/component
import Paper2Button from "../../Paper2Button"; // plasmic-import: N0wwUZYvk9/component

import { useScreenVariants as useScreenVariants_943UUhCMfqsg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 943uUhC-MFQSG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_john_minelli_page.module.css"; // plasmic-import: sJW2SjvbA4LuFhHrBsyfEH/projectcss
import sty from "./PlasmicPrinter.module.css"; // plasmic-import: ktUZWyedPGv/css

import imageRqSlXdSwk from "./images/image.svg"; // plasmic-import: rqSlXDSwk/picture
import image10Beg4PkDLy from "./images/image10.svg"; // plasmic-import: BEG4pkDLy/picture
import image8TwfgTt7W from "./images/image8.svg"; // plasmic-import: TwfgTT-7w/picture
import iros23PngFoCZosGEstay from "./images/iros23Png.png"; // plasmic-import: foCZosGEstay/picture
import imet23PngDrDtl7NfwIjZ from "./images/imet23Png.png"; // plasmic-import: drDtl7nfwIjZ/picture

createPlasmicElementProxy;

export type PlasmicPrinter__VariantMembers = {
  printedPapers: "nvs" | "leggedLocomotion";
};
export type PlasmicPrinter__VariantsArgs = {
  printedPapers?: SingleChoiceArg<"nvs" | "leggedLocomotion">;
};
type VariantPropType = keyof PlasmicPrinter__VariantsArgs;
export const PlasmicPrinter__VariantProps = new Array<VariantPropType>(
  "printedPapers"
);

export type PlasmicPrinter__ArgsType = {
  arxivLink?: string;
  onArxivLinkChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicPrinter__ArgsType;
export const PlasmicPrinter__ArgProps = new Array<ArgPropType>(
  "arxivLink",
  "onArxivLinkChange"
);

export type PlasmicPrinter__OverridesType = {
  root?: Flex__<"div">;
  printer?: Flex__<typeof PlasmicImg__>;
  nvsButton?: Flex__<typeof Paper1Button>;
  legButton?: Flex__<typeof Paper2Button>;
  longerSheet?: Flex__<typeof PlasmicImg__>;
  printedArea?: Flex__<"div">;
  text?: Flex__<"div">;
  link?: Flex__<"a">;
  conf?: Flex__<"a">;
  sheetWheel?: Flex__<"div">;
};

export interface DefaultPrinterProps {
  arxivLink?: string;
  onArxivLinkChange?: (val: string) => void;
  printedPapers?: SingleChoiceArg<"nvs" | "leggedLocomotion">;
  className?: string;
}

const $$ = {};

function PlasmicPrinter__RenderFunc(props: {
  variants: PlasmicPrinter__VariantsArgs;
  args: PlasmicPrinter__ArgsType;
  overrides: PlasmicPrinter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "arxivLink",
        type: "writable",
        variableType: "text",

        valueProp: "arxivLink",
        onChangeProp: "onArxivLinkChange"
      },
      {
        path: "printedPapers",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.printedPapers
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_943UUhCMfqsg()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootprintedPapers_nvs]: hasVariant(
            $state,
            "printedPapers",
            "nvs"
          )
        }
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"printer"}
        data-plasmic-override={overrides.printer}
        alt={""}
        className={classNames(sty.printer, {
          [sty.printerprintedPapers_leggedLocomotion]: hasVariant(
            $state,
            "printedPapers",
            "leggedLocomotion"
          ),
          [sty.printerprintedPapers_nvs]: hasVariant(
            $state,
            "printedPapers",
            "nvs"
          )
        })}
        displayHeight={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? "158px"
            : hasVariant(globalVariants, "screen", "laptop")
            ? "auto"
            : "100%"
        }
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? "320px"
            : hasVariant(globalVariants, "screen", "laptop")
            ? "100%"
            : "100%"
        }
        loading={"lazy"}
        src={{
          src: imageRqSlXdSwk,
          fullWidth: 299,
          fullHeight: 150,
          aspectRatio: 1.995146
        }}
      />

      <Paper1Button
        data-plasmic-name={"nvsButton"}
        data-plasmic-override={overrides.nvsButton}
        className={classNames("__wab_instance", sty.nvsButton, {
          [sty.nvsButtonprintedPapers_nvs]: hasVariant(
            $state,
            "printedPapers",
            "nvs"
          )
        })}
        onPress={async event => {
          const $steps = {};

          $steps["updatePrintedPapers"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "printedPapers",
                  operation: 0,
                  value: "nvs"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updatePrintedPapers"] != null &&
            typeof $steps["updatePrintedPapers"] === "object" &&
            typeof $steps["updatePrintedPapers"].then === "function"
          ) {
            $steps["updatePrintedPapers"] = await $steps["updatePrintedPapers"];
          }

          $steps["updateArxivLink"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["arxivLink"]
                  },
                  operation: 0,
                  value: "https://arxiv.org/abs/2308.14108"
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateArxivLink"] != null &&
            typeof $steps["updateArxivLink"] === "object" &&
            typeof $steps["updateArxivLink"].then === "function"
          ) {
            $steps["updateArxivLink"] = await $steps["updateArxivLink"];
          }
        }}
      />

      <Paper2Button
        data-plasmic-name={"legButton"}
        data-plasmic-override={overrides.legButton}
        className={classNames("__wab_instance", sty.legButton, {
          [sty.legButtonprintedPapers_leggedLocomotion]: hasVariant(
            $state,
            "printedPapers",
            "leggedLocomotion"
          ),
          [sty.legButtonprintedPapers_nvs]: hasVariant(
            $state,
            "printedPapers",
            "nvs"
          )
        })}
        onPress={async event => {
          const $steps = {};

          $steps["updatePrintedPapers"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "printedPapers",
                  operation: 0,
                  value: "leggedLocomotion"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updatePrintedPapers"] != null &&
            typeof $steps["updatePrintedPapers"] === "object" &&
            typeof $steps["updatePrintedPapers"].then === "function"
          ) {
            $steps["updatePrintedPapers"] = await $steps["updatePrintedPapers"];
          }

          $steps["updateArxivLink"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["arxivLink"]
                  },
                  operation: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, undefined);
                  return undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateArxivLink"] != null &&
            typeof $steps["updateArxivLink"] === "object" &&
            typeof $steps["updateArxivLink"].then === "function"
          ) {
            $steps["updateArxivLink"] = await $steps["updateArxivLink"];
          }
        }}
      />

      <PlasmicImg__
        data-plasmic-name={"longerSheet"}
        data-plasmic-override={overrides.longerSheet}
        alt={""}
        className={classNames(sty.longerSheet)}
        displayHeight={"102px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        loading={"lazy"}
        src={{
          src: image10Beg4PkDLy,
          fullWidth: 300,
          fullHeight: 139,
          aspectRatio: 2.152174
        }}
      />

      <div
        data-plasmic-name={"printedArea"}
        data-plasmic-override={overrides.printedArea}
        className={classNames(projectcss.all, sty.printedArea, {
          [sty.printedAreaprintedPapers_leggedLocomotion]: hasVariant(
            $state,
            "printedPapers",
            "leggedLocomotion"
          ),
          [sty.printedAreaprintedPapers_nvs]: hasVariant(
            $state,
            "printedPapers",
            "nvs"
          )
        })}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textprintedPapers_leggedLocomotion]: hasVariant(
                $state,
                "printedPapers",
                "leggedLocomotion"
              ),
              [sty.textprintedPapers_nvs]: hasVariant(
                $state,
                "printedPapers",
                "nvs"
              )
            }
          )}
        >
          {hasVariant($state, "printedPapers", "leggedLocomotion")
            ? "Towards Continual RL for Quadruped Robots"
            : hasVariant($state, "printedPapers", "nvs")
            ? "Depth self-supervision for single image novel view synthesis"
            : ""}
        </div>
        <a
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link, {
            [sty.linkprintedPapers_leggedLocomotion]: hasVariant(
              $state,
              "printedPapers",
              "leggedLocomotion"
            ),
            [sty.linkprintedPapers_nvs]: hasVariant(
              $state,
              "printedPapers",
              "nvs"
            )
          })}
          href={(() => {
            try {
              return $state.arxivLink;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return `/`;
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};
          }}
          target={"_blank"}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__iLex, {
              [sty.imgprintedPapers_nvs__iLexbI3X]: hasVariant(
                $state,
                "printedPapers",
                "nvs"
              )
            })}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: image8TwfgTt7W,
              fullWidth: 300,
              fullHeight: 135,
              aspectRatio: 2.222644
            }}
          />
        </a>
        <a
          data-plasmic-name={"conf"}
          data-plasmic-override={overrides.conf}
          className={classNames(projectcss.all, projectcss.a, sty.conf, {
            [sty.confprintedPapers_leggedLocomotion]: hasVariant(
              $state,
              "printedPapers",
              "leggedLocomotion"
            ),
            [sty.confprintedPapers_nvs]: hasVariant(
              $state,
              "printedPapers",
              "nvs"
            )
          })}
          href={(() => {
            try {
              return $state.arxivLink;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return `/`;
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};
          }}
          target={"_blank"}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___6Sane, {
              [sty.imgprintedPapers_leggedLocomotion___6SaneNqIl]: hasVariant(
                $state,
                "printedPapers",
                "leggedLocomotion"
              ),
              [sty.imgprintedPapers_nvs___6SanebI3X]: hasVariant(
                $state,
                "printedPapers",
                "nvs"
              )
            })}
            displayHeight={
              hasVariant($state, "printedPapers", "leggedLocomotion")
                ? "12px"
                : "31px"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={
              hasVariant($state, "printedPapers", "leggedLocomotion")
                ? {
                    src: imet23PngDrDtl7NfwIjZ,
                    fullWidth: 162,
                    fullHeight: 39,
                    aspectRatio: undefined
                  }
                : {
                    src: iros23PngFoCZosGEstay,
                    fullWidth: 120,
                    fullHeight: 114,
                    aspectRatio: undefined
                  }
            }
          />
        </a>
      </div>
      <div
        data-plasmic-name={"sheetWheel"}
        data-plasmic-override={overrides.sheetWheel}
        className={classNames(projectcss.all, sty.sheetWheel)}
        onClick={async event => {
          const $steps = {};

          $steps["updatePrintedPapers"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "printedPapers",
                  operation: 0,
                  value: []
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updatePrintedPapers"] != null &&
            typeof $steps["updatePrintedPapers"] === "object" &&
            typeof $steps["updatePrintedPapers"].then === "function"
          ) {
            $steps["updatePrintedPapers"] = await $steps["updatePrintedPapers"];
          }

          $steps["updateArxivLink"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["arxivLink"]
                  },
                  operation: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, undefined);
                  return undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateArxivLink"] != null &&
            typeof $steps["updateArxivLink"] === "object" &&
            typeof $steps["updateArxivLink"].then === "function"
          ) {
            $steps["updateArxivLink"] = await $steps["updateArxivLink"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "printer",
    "nvsButton",
    "legButton",
    "longerSheet",
    "printedArea",
    "text",
    "link",
    "conf",
    "sheetWheel"
  ],
  printer: ["printer"],
  nvsButton: ["nvsButton"],
  legButton: ["legButton"],
  longerSheet: ["longerSheet"],
  printedArea: ["printedArea", "text", "link", "conf"],
  text: ["text"],
  link: ["link"],
  conf: ["conf"],
  sheetWheel: ["sheetWheel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  printer: typeof PlasmicImg__;
  nvsButton: typeof Paper1Button;
  legButton: typeof Paper2Button;
  longerSheet: typeof PlasmicImg__;
  printedArea: "div";
  text: "div";
  link: "a";
  conf: "a";
  sheetWheel: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrinter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrinter__VariantsArgs;
    args?: PlasmicPrinter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrinter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPrinter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPrinter__ArgProps,
          internalVariantPropNames: PlasmicPrinter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPrinter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrinter";
  } else {
    func.displayName = `PlasmicPrinter.${nodeName}`;
  }
  return func;
}

export const PlasmicPrinter = Object.assign(
  // Top-level PlasmicPrinter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    printer: makeNodeComponent("printer"),
    nvsButton: makeNodeComponent("nvsButton"),
    legButton: makeNodeComponent("legButton"),
    longerSheet: makeNodeComponent("longerSheet"),
    printedArea: makeNodeComponent("printedArea"),
    text: makeNodeComponent("text"),
    link: makeNodeComponent("link"),
    conf: makeNodeComponent("conf"),
    sheetWheel: makeNodeComponent("sheetWheel"),

    // Metadata about props expected for PlasmicPrinter
    internalVariantProps: PlasmicPrinter__VariantProps,
    internalArgProps: PlasmicPrinter__ArgProps,

    // Key-value metadata
    metadata: { nameProject: "FLATLAND" }
  }
);

export default PlasmicPrinter;
/* prettier-ignore-end */
