// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sJW2SjvbA4LuFhHrBsyfEH
// Component: hx5Zt00vBr

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_john_minelli_page.module.css"; // plasmic-import: sJW2SjvbA4LuFhHrBsyfEH/projectcss
import sty from "./PlasmicSocialLink.module.css"; // plasmic-import: hx5Zt00vBr/css

import GithubSvgIcon from "./icons/PlasmicIcon__GithubSvg"; // plasmic-import: dNovjR86D5/icon
import XLogo2023OriginalsvgIcon from "./icons/PlasmicIcon__XLogo2023Originalsvg"; // plasmic-import: HNBJM98fZ7O1/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin"; // plasmic-import: 67Imrh2ba/icon

createPlasmicElementProxy;

export type PlasmicSocialLink__VariantMembers = {
  social: "git" | "twitter" | "linkedin";
};
export type PlasmicSocialLink__VariantsArgs = {
  social?: SingleChoiceArg<"git" | "twitter" | "linkedin">;
};
type VariantPropType = keyof PlasmicSocialLink__VariantsArgs;
export const PlasmicSocialLink__VariantProps = new Array<VariantPropType>(
  "social"
);

export type PlasmicSocialLink__ArgsType = {};
type ArgPropType = keyof PlasmicSocialLink__ArgsType;
export const PlasmicSocialLink__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialLink__OverridesType = {
  root?: Flex__<"a">;
};

export interface DefaultSocialLinkProps {
  social?: SingleChoiceArg<"git" | "twitter" | "linkedin">;
  className?: string;
}

const $$ = {};

function PlasmicSocialLink__RenderFunc(props: {
  variants: PlasmicSocialLink__VariantsArgs;
  args: PlasmicSocialLink__ArgsType;
  overrides: PlasmicSocialLink__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "social",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.social
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <a
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootsocial_git]: hasVariant($state, "social", "git"),
          [sty.rootsocial_linkedin]: hasVariant($state, "social", "linkedin"),
          [sty.rootsocial_twitter]: hasVariant($state, "social", "twitter")
        }
      )}
      href={
        hasVariant($state, "social", "linkedin")
          ? "https://www.linkedin.com/in/giovanni-minelli-6618731b6/"
          : hasVariant($state, "social", "twitter")
          ? "https://twitter.com/JohnMinelli3"
          : hasVariant($state, "social", "git")
          ? "https://github.com/johnMinelli"
          : "www.google.com."
      }
      target={"_blank"}
    >
      <GithubSvgIcon
        className={classNames(projectcss.all, sty.svg__bE6O, {
          [sty.svgsocial_linkedin__bE6OjR7Wz]: hasVariant(
            $state,
            "social",
            "linkedin"
          ),
          [sty.svgsocial_twitter__bE6OeUvvh]: hasVariant(
            $state,
            "social",
            "twitter"
          )
        })}
        role={"img"}
      />

      <XLogo2023OriginalsvgIcon
        className={classNames(projectcss.all, sty.svg__w2OP, {
          [sty.svgsocial_twitter__w2OPEUvvh]: hasVariant(
            $state,
            "social",
            "twitter"
          )
        })}
        role={"img"}
      />

      <LinkedinIcon
        className={classNames(projectcss.all, sty.svg__fx80U, {
          [sty.svgsocial_linkedin__fx80UjR7Wz]: hasVariant(
            $state,
            "social",
            "linkedin"
          )
        })}
        role={"img"}
      />
    </a>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialLink__VariantsArgs;
    args?: PlasmicSocialLink__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSocialLink__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialLink__ArgProps,
          internalVariantPropNames: PlasmicSocialLink__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialLink";
  } else {
    func.displayName = `PlasmicSocialLink.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialLink = Object.assign(
  // Top-level PlasmicSocialLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSocialLink
    internalVariantProps: PlasmicSocialLink__VariantProps,
    internalArgProps: PlasmicSocialLink__ArgProps
  }
);

export default PlasmicSocialLink;
/* prettier-ignore-end */
