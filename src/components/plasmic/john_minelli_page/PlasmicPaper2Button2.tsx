// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sJW2SjvbA4LuFhHrBsyfEH
// Component: DiDoqGTUiD

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_john_minelli_page.module.css"; // plasmic-import: sJW2SjvbA4LuFhHrBsyfEH/projectcss
import sty from "./PlasmicPaper2Button2.module.css"; // plasmic-import: DiDoqGTUiD/css

import eye16FTwf51Q1 from "./images/eye16.svg"; // plasmic-import: fTwf5-1Q1/picture

createPlasmicElementProxy;

export type PlasmicPaper2Button2__VariantMembers = {};
export type PlasmicPaper2Button2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaper2Button2__VariantsArgs;
export const PlasmicPaper2Button2__VariantProps = new Array<VariantPropType>();

export type PlasmicPaper2Button2__ArgsType = {
  onPress?: (event: any) => void;
};
type ArgPropType = keyof PlasmicPaper2Button2__ArgsType;
export const PlasmicPaper2Button2__ArgProps = new Array<ArgPropType>("onPress");

export type PlasmicPaper2Button2__OverridesType = {
  root?: p.Flex<"div">;
  frame2?: p.Flex<typeof p.PlasmicImg>;
  frame1?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultPaper2Button2Props {
  onPress?: (event: any) => void;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicPaper2Button2__RenderFunc(props: {
  variants: PlasmicPaper2Button2__VariantsArgs;
  args: PlasmicPaper2Button2__ArgsType;
  overrides: PlasmicPaper2Button2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
        data-plasmic-trigger-props={[triggerRootHoverProps]}
      >
        {(triggers.hover_root ? true : true) ? (
          <p.PlasmicImg
            data-plasmic-name={"frame2"}
            data-plasmic-override={overrides.frame2}
            alt={""}
            className={classNames(sty.frame2)}
            displayHeight={"100%" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            onClick={args.onPress}
            src={{
              src: eye16FTwf51Q1,
              fullWidth: 14,
              fullHeight: 14,
              aspectRatio: 1
            }}
          />
        ) : null}
        {(triggers.hover_root ? true : true) ? (
          <p.PlasmicImg
            data-plasmic-name={"frame1"}
            data-plasmic-override={overrides.frame1}
            alt={""}
            className={classNames(sty.frame1)}
            displayHeight={"100%" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: eye16FTwf51Q1,
              fullWidth: 14,
              fullHeight: 14,
              aspectRatio: 1
            }}
          />
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "frame2", "frame1"],
  frame2: ["frame2"],
  frame1: ["frame1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame2: typeof p.PlasmicImg;
  frame1: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaper2Button2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaper2Button2__VariantsArgs;
    args?: PlasmicPaper2Button2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaper2Button2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPaper2Button2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPaper2Button2__ArgProps,
          internalVariantPropNames: PlasmicPaper2Button2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPaper2Button2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPaper2Button2";
  } else {
    func.displayName = `PlasmicPaper2Button2.${nodeName}`;
  }
  return func;
}

export const PlasmicPaper2Button2 = Object.assign(
  // Top-level PlasmicPaper2Button2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame2: makeNodeComponent("frame2"),
    frame1: makeNodeComponent("frame1"),

    // Metadata about props expected for PlasmicPaper2Button2
    internalVariantProps: PlasmicPaper2Button2__VariantProps,
    internalArgProps: PlasmicPaper2Button2__ArgProps,

    // Key-value metadata
    metadata: { nameProject: "FLATLAND" }
  }
);

export default PlasmicPaper2Button2;
/* prettier-ignore-end */
